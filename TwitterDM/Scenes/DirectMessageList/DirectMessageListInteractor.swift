//
//  DirectMessageListInteractor.swift
//  TwitterDM
//
//  Created Shashank Shandilya on 6/17/18.
//  Copyright © 2018 org. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import TwitterKit

class DirectMessageListInteractor: DirectMessageListInteractorProtocol {
    weak var presenter: DirectMessageListPresenterProtocol?
    lazy var apiManager: DirectMessageListAPIManager = DirectMessageListAPIManager()
    var directMessages = [[String: [Event]]]()
    
    func fetchDirectMessageList(_ success: @escaping (_ messageList: [[String: [Event]]]) -> Void, failure: @escaping (Error) -> Void) {
        apiManager.fetchDirectMessageList({ [weak self] (directMessageList) in
            self?.processEvents(messageList: directMessageList, on: success)
        }) { (error) in
            failure(error)
        }
    }
    
    func processEvents(messageList: DirectMessageList, on completion: (_ messageList: [[String: [Event]]]) -> Void) {
        directMessages = [[String: [Event]]]()
        for event in messageList.events {
            guard let messageCreate = event.messageCreate else {
                continue
            }
            
            guard let recipientID: String = messageCreate.isSent ? messageCreate.target?.recipientId : messageCreate.senderId else {
                continue
            }
            
            let recipientIndex = directMessages.index(where: { (element) -> Bool in
                return element[recipientID] != nil
            })
            
            var events: [Event] = [event]
            if let index = recipientIndex {
                events = directMessages[index][recipientID]!
                events.append(event)
                directMessages[index][recipientID] = events
            } else {
                directMessages.append([recipientID: [event]])
            }
        }
        
        completion(directMessages)
    }
    
    func events(for recipientID: String) -> [Event] {
        let recipientIndex = directMessages.index(where: { (element) -> Bool in
            return element[recipientID] != nil
        })
        
        if recipientIndex != nil {
            return directMessages[recipientIndex!][recipientID]!
        }
        
        return []
    }
}
